pipeline {
    agent any

    environment {
        REGISTRY = "your-docker-registry"
        IMAGE_NAME = "your-app-image"
        TAG = "latest"
        DOCKER_CREDENTIALS = credentials('docker-credentials-id') // Add your Docker credentials in Jenkins
        STAGING_HOST = 'your-staging-server'
        SSH_CREDENTIALS = credentials('ssh-credentials-id') // Add your SSH credentials for staging
    }

    stages {
        stage('Checkout Code') {
            steps {
                // Checkout the source code from your Git repository
                git 'https://github.com/your-repo/your-app.git'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Build the Docker image
                    sh "docker build -t ${REGISTRY}/${IMAGE_NAME}:${TAG} ."
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    // Push the Docker image to the registry
                    withDockerRegistry([credentialsId: DOCKER_CREDENTIALS]) {
                        sh "docker push ${REGISTRY}/${IMAGE_NAME}:${TAG}"
                    }
                }
            }
        }

        stage('Deploy to Staging') {
            steps {
                script {
                    // SSH into the staging server and deploy the container
                    sshagent([SSH_CREDENTIALS]) {
                        sh """
                            ssh -o StrictHostKeyChecking=no user@${STAGING_HOST} << EOF
                            docker pull ${REGISTRY}/${IMAGE_NAME}:${TAG}
                            docker stop your-app || true
                            docker rm your-app || true
                            docker run -d --name your-app -p 8080:8080 ${REGISTRY}/${IMAGE_NAME}:${TAG}
                            EOF
                        """
                    }
                }
            }
        }
    }

    post {
        success {
            echo "Deployment to staging was successful!"
        }
        failure {
            echo "Deployment failed. Please check the logs."
        }
    }
}
